generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   @unique
  password        String
  firstName       String?
  lastName        String?
  profilePicture  String?
  skillLevel      String   @default("beginner")
  preferredPosition String?
  bio             String?
  isVerified      Boolean  @default(false)
  isActive        Boolean  @default(true)
  role            String   @default("user") // user, admin, super_admin
  
  // Location preferences
  latitude        Float?
  longitude       Float?
  locationRadius  Int      @default(10) // km radius for finding games
  
  // Stats
  gamesPlayed     Int      @default(0)
  gamesCreated    Int      @default(0)
  rating          Float    @default(0.0)
  totalRatings    Int      @default(0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?

  // Relations
  createdLocations Location[] @relation("LocationCreator")
  createdGames     Game[]     @relation("GameCreator")
  gameParticipants GameParticipant[]
  adminLogs        AdminLog[]

  @@map("users")
}

model Location {
  id            String   @id @default(cuid())
  name          String
  address       String
  description   String?
  latitude      Float
  longitude     Float
  
  // Court details
  courtType     String   @default("outdoor") // indoor, outdoor, hybrid
  surfaceType   String   @default("asphalt") // hardwood, asphalt, concrete, rubber
  hoopCount     Int      @default(2)
  amenities     String[] @default([])
  photos        String[] @default([])
  
  // Status and approval
  isActive      Boolean  @default(true)
  isVerified    Boolean  @default(false)
  isApproved    Boolean  @default(false) // Admin approval required
  approvedBy    String?  // Admin who approved
  approvedAt    DateTime?
  
  // Ratings and usage
  rating        Float    @default(0.0)
  totalRatings  Int      @default(0)
  totalGames    Int      @default(0)
  
  // Timestamps
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  creator       User     @relation("LocationCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  games         Game[]

  @@map("locations")
}

model Game {
  id            String   @id @default(cuid())
  title         String
  description   String?
  
  // Game details
  skillLevel    String?  @default("any")
  maxPlayers    Int      @default(10)
  currentPlayers Int     @default(1)
  gameType      String   @default("pickup") // pickup, tournament, scrimmage
  duration      Int?     // minutes
  
  // Timing
  scheduledAt   DateTime
  startedAt     DateTime?
  endedAt       DateTime?
  
  // Status
  status        String   @default("scheduled") // scheduled, starting, active, completed, cancelled
  isPrivate     Boolean  @default(false)
  requiresApproval Boolean @default(false)
  
  // Relations
  locationId    String
  creatorId     String
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  location      Location          @relation(fields: [locationId], references: [id], onDelete: Cascade)
  creator       User              @relation("GameCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants  GameParticipant[]

  @@map("games")
}

model GameParticipant {
  id       String   @id @default(cuid())
  gameId   String
  userId   String
  joinedAt DateTime @default(now())
  leftAt   DateTime?
  status   String   @default("joined") // joined, left, kicked, no_show

  // Relations
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, userId])
  @@map("game_participants")
}

model AdminLog {
  id         String   @id @default(cuid())
  action     String   // user_created, location_approved, location_deleted, etc.
  targetType String   // User, Location, Game, etc.
  targetId   String
  details    Json?
  
  // Relations
  admin      User     @relation(fields: [adminId], references: [id])
  adminId    String
  
  // Timestamps
  createdAt  DateTime @default(now())
  
  @@map("admin_logs")
}